apiVersion: v1                                       
kind: ConfigMap                                      
metadata:                                            
  name: openid-connect-configuration-conf
  namespace: nginx-apigw
data:
  openid_connect_configuration.conf: |-
    # OpenID Connect configuration
    #
    # Each map block allows multiple values so that multiple IdPs can be supported,
    # the $host variable is used as the default input parameter but can be changed.
    #
    map $uri $oidc_authz_endpoint {
        "~/testapi-1/" "https://idp-1.ff.lan/auth/realms/master/protocol/openid-connect/auth";
        "~/testapi-2/" "https://idp-2.ff.lan/auth/realms/master/protocol/openid-connect/auth";
    }
    
    map $uri $oidc_token_endpoint {
        "~/testapi-1/" "https://idp-1.ff.lan/auth/realms/master/protocol/openid-connect/token";
        "~/testapi-2/" "https://idp-2.ff.lan/auth/realms/master/protocol/openid-connect/token";
    }
    
    map $uri $oidc_jwt_keyfile {
        "~/testapi-1/" "https://idp-1.ff.lan/auth/realms/master/protocol/openid-connect/certs";
        "~/testapi-2/" "https://idp-2.ff.lan/auth/realms/master/protocol/openid-connect/certs";
    }
    
    map $uri $oidc_client {
        "~/testapi-1/" "[OIDC_CLIENT_NAME_HERE]";
        "~/testapi-2/" "[OIDC_CLIENT_NAME_HERE]";
        default "empty";
    }
    
    map $uri $oidc_pkce_enable {
        default 0;
    }
    
    map $uri $oidc_client_secret {
        "~/testapi-1/" "[OIDC_CLIENT_SECRET_HERE]";
        "~/testapi-2/" "[OIDC_CLIENT_SECRET_HERE]";
        default "empty";
    }
    
    map $uri $oidc_scopes {
        default "openid+profile+email+offline_access";
    }
    
    map $uri $oidc_logout_redirect {
        # Where to send browser after requesting /logout location. This can be
        # replaced with a custom logout page, or complete URL.
        default "/_logout"; # Built-in, simple logout page
    }
    
    map $uri $oidc_hmac_key {
        # This should be unique for every NGINX instance/cluster
        default "[UNIQUE_HMAC_KEY_HERE]";
    }

    # Per-URI allowed HTTP methods - blank delimited
    map $uri $apigw_allowed_http_methods {
        "~/testapi-1/" "GET";
        "~/testapi-2/" "GET DELETE";
        default 0;
    }

    # URI rewriting
    map $uri $rewritten_uri {
        "/testapi-1/tasks-external" "/testapi-1/testapi-1/tasks";
    #    "/testapi-1/tasks-external" "https://new-fqdn.com/api/service";
        default "";
    }
    
    map $proto $oidc_cookie_flags {
        http  "Path=/; SameSite=lax;"; # For HTTP/plaintext testing
        https "Path=/; SameSite=lax; HttpOnly; Secure;"; # Production recommendation
    }
    
    map $http_x_forwarded_port $redirect_base {
        ""      $proto://$host:$server_port;
        default $proto://$host:$http_x_forwarded_port;
        #default https://$host:443;
    }
    
    map $http_x_forwarded_proto $proto {
        ""      $scheme;
        default $http_x_forwarded_proto;
    }

    ### REST API Quota management

    # Quotas set based on URI + "Consumer" HTTP Header
    map $uri $quota_enabled {
        "/testapi-1/" "1";
        default "";
    }

    map $http_consumer:$uri $quota_remaining {
        "foo:/testapi-1/tasks" "5";
    }
    
    # ADVANCED CONFIGURATION BELOW THIS LINE
    # Additional advanced configuration (server context) in openid_connect.server_conf
    
    # JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
    proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;
    
    # Change timeout values to at least the validity period of each token type
    #keyval_zone zone=oidc_id_tokens:1M state=conf.d/oidc_id_tokens.json timeout=1h;
    #keyval_zone zone=refresh_tokens:1M state=conf.d/refresh_tokens.json timeout=8h;
    #keyval_zone zone=oidc_id_tokens:1M state=/var/cache/nginx/oidc_id_tokens.json timeout=1h;
    #keyval_zone zone=refresh_tokens:1M state=/var/cache/nginx/refresh_tokens.json timeout=8h;
    keyval_zone zone=oidc_id_tokens:1M state=/var/tmp/oidc_id_tokens.json timeout=1h;
    keyval_zone zone=refresh_tokens:1M state=/var/tmp/refresh_tokens.json timeout=8h;
    keyval_zone zone=oidc_pkce:128K timeout=90s; # Temporary storage for PKCE code verifier.
    
    keyval $cookie_auth_token $session_jwt zone=oidc_id_tokens;   # Exchange cookie for JWT
    keyval $cookie_auth_token $refresh_token zone=refresh_tokens; # Exchange cookie for refresh token
    keyval $request_id $new_session zone=oidc_id_tokens; # For initial session creation
    keyval $request_id $new_refresh zone=refresh_tokens; # ''
    keyval $pkce_id $pkce_code_verifier zone=oidc_pkce;
    
    auth_jwt_claim_set $jwt_audience aud; # In case aud is an array
    js_import oidc from conf.d/openid_connect.js;
