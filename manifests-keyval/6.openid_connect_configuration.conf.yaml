apiVersion: v1                                       
kind: ConfigMap                                      
metadata:                                            
  name: openid-connect-configuration-conf
  namespace: nginx-apigw
data:
  openid_connect_configuration.conf: |-
    # OpenID Connect configuration

    # OIDC AuthZ endpoints
    keyval_zone zone=oidc_authz_endpoints:1M state=/var/tmp/oidc_authz_endpoints.json type=prefix;
    keyval $uri $oidc_authz_endpoint zone=oidc_authz_endpoints;
    
    # OIDC token endpoints
    keyval_zone zone=oidc_token_endpoints:1M state=/var/tmp/oidc_token_endpoints.json type=prefix;
    keyval $uri $oidc_token_endpoint zone=oidc_token_endpoints;
    
    # OIDC endpoint to fetch jwt keyfiles
    keyval_zone zone=oidc_jwt_keyfiles:1M state=/var/tmp/oidc_jwt_keyfiles.json type=prefix;
    keyval $uri $oidc_jwt_keyfile zone=oidc_jwt_keyfiles;

    # OIDC client ids    
    keyval_zone zone=oidc_clients:1M state=/var/tmp/oidc_clients.json type=prefix;
    keyval $uri $oidc_client zone=oidc_clients;
    
    map $uri $oidc_pkce_enable {
        default 0;
    }

    # OIDC client secret
    keyval_zone zone=oidc_client_secrets:1M state=/var/tmp/oidc_client_secrets.json type=prefix;
    keyval $uri $oidc_client_secret zone=oidc_client_secrets;
    
    map $uri $oidc_scopes {
        default "openid+profile+email+offline_access";
    }
    
    # Where to send browser after requesting /logout location. This can be
    # replaced with a custom logout page, or complete URL.
    keyval_zone zone=oidc_logout_redirect:1M state=/var/tmp/oidc_logout_redirect.json type=prefix;
    keyval $uri $oidc_logout_redirect zone=oidc_logout_redirect;
    
    # OIDC hmac key - This should be unique for every NGINX instance/cluster
    keyval_zone zone=oidc_hmacs:1M state=/var/tmp/oidc_hmacs.json type=prefix;
    keyval $uri $oidc_hmac_key zone=oidc_hmacs;


    # Per-URI allowed HTTP methods - blank delimited
    keyval_zone zone=allowed_http_methods:1M state=/var/tmp/allowed_http_methods.json type=prefix;
    keyval $uri $apigw_allowed_http_methods zone=allowed_http_methods;

    # URI rewriting
    keyval_zone zone=uri_rewrite:1M state=/var/tmp/uri_rewrite.json type=string;
    keyval $uri $rewritten_uri zone=uri_rewrite;

    map $proto $oidc_cookie_flags {
        http  "Path=/; SameSite=lax;"; # For HTTP/plaintext testing
        https "Path=/; SameSite=lax; HttpOnly; Secure;"; # Production recommendation
    }
    
    map $http_x_forwarded_port $redirect_base {
        ""      $proto://$host:$server_port;
        default $proto://$host:$http_x_forwarded_port;
    }
    
    map $http_x_forwarded_proto $proto {
        ""      $scheme;
        default $http_x_forwarded_proto;
    }
    
    # ADVANCED CONFIGURATION BELOW THIS LINE
    # Additional advanced configuration (server context) in openid_connect.server_conf
    
    # JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
    proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;
    
    # Change timeout values to at least the validity period of each token type
    #keyval_zone zone=oidc_id_tokens:1M state=conf.d/oidc_id_tokens.json timeout=1h;
    #keyval_zone zone=refresh_tokens:1M state=conf.d/refresh_tokens.json timeout=8h;
    #keyval_zone zone=oidc_id_tokens:1M state=/var/cache/nginx/oidc_id_tokens.json timeout=1h;
    #keyval_zone zone=refresh_tokens:1M state=/var/cache/nginx/refresh_tokens.json timeout=8h;
    keyval_zone zone=oidc_id_tokens:1M state=/var/tmp/oidc_id_tokens.json timeout=1h;
    keyval_zone zone=refresh_tokens:1M state=/var/tmp/refresh_tokens.json timeout=8h;
    keyval_zone zone=oidc_pkce:128K timeout=90s; # Temporary storage for PKCE code verifier.
    
    keyval $cookie_auth_token $session_jwt zone=oidc_id_tokens;   # Exchange cookie for JWT
    keyval $cookie_auth_token $refresh_token zone=refresh_tokens; # Exchange cookie for refresh token
    keyval $request_id $new_session zone=oidc_id_tokens; # For initial session creation
    keyval $request_id $new_refresh zone=refresh_tokens; # ''
    keyval $pkce_id $pkce_code_verifier zone=oidc_pkce;
    
    auth_jwt_claim_set $jwt_audience aud; # In case aud is an array
    js_import oidc from conf.d/openid_connect.js;
